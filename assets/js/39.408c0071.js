(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{453:function(r,e,t){"use strict";t.r(e);var a=t(2),o=Object(a.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("hr"),r._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/scr1pt-yang/mypichost@main/img/docker-9.png",alt:"image.png"}}),e("br"),r._v("Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。")]),r._v(" "),e("h1",{attrs:{id:"一、docker核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、docker核心概念"}},[r._v("#")]),r._v(" 一、Docker核心概念")]),r._v(" "),e("h2",{attrs:{id:"_1、镜像-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、镜像-image"}},[r._v("#")]),r._v(" 1、镜像（image）")]),r._v(" "),e("p",[r._v("Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。"),e("br"),r._v("它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。"),e("br"),r._v("相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。"),e("br"),r._v("通俗的讲，我们将容器进行抽象，得到镜像；将镜像实例化，得到容器。")]),r._v(" "),e("h2",{attrs:{id:"_2、容器-container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器-container"}},[r._v("#")]),r._v(" 2、容器（container）")]),r._v(" "),e("h3",{attrs:{id:"_1-从面向对象角度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-从面向对象角度"}},[r._v("#")]),r._v(" 1.从面向对象角度")]),r._v(" "),e("p",[r._v("Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。")]),r._v(" "),e("h3",{attrs:{id:"_2-从镜像容器角度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-从镜像容器角度"}},[r._v("#")]),r._v(" 2.从镜像容器角度")]),r._v(" "),e("p",[r._v("可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。")]),r._v(" "),e("h2",{attrs:{id:"_3、仓库-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、仓库-repository"}},[r._v("#")]),r._v(" 3、仓库（repository）")]),r._v(" "),e("p",[r._v("仓库（Repository）是集中存放镜像文件的场所。类似于Maven仓库是存放各种jar包的地方，github仓库是存放各种git项目的地方。Docker公司提供的官方Repository被称为Docker Hub，存放各种镜像模板的地方。"),e("br"),r._v("仓库分为公开仓库（Public）和私有仓库（Private）两种形式。"),e("br"),r._v("最大的公开仓库是 "),e("a",{attrs:{href:""}},[r._v("Docker Hub")]),r._v("，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等。")]),r._v(" "),e("h2",{attrs:{id:"_4、总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、总结"}},[r._v("#")]),r._v(" 4、总结")]),r._v(" "),e("p",[r._v("需要正确的理解仓库/镜像/容器这几个概念:"),e("br"),r._v("Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。"),e("br"),r._v("image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")]),r._v(" "),e("h1",{attrs:{id:"二、docker平台架构图解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、docker平台架构图解"}},[r._v("#")]),r._v(" 二、Docker平台架构图解")]),r._v(" "),e("p",[r._v("Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。"),e("br"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/scr1pt-yang/mypichost@main/img/docker-10.png",alt:"image.png"}}),e("br"),r._v("Docker运行的基本流程为：")]),r._v(" "),e("ol",[e("li",[r._v("用户是使用Docker Client与Docker Daemon建立通信，并发送请求给后者。")]),r._v(" "),e("li",[r._v("Docker Daemon作为Docker架构中的主体部分，首先提供Docker Server的功能使其可以接受Docker Client的请求。")]),r._v(" "),e("li",[r._v("Docker Engine执行Docker内部的一系列工作，每一项工作都是以一个Job的形式的存在。")]),r._v(" "),e("li",[r._v("Job的运行过程中，当需要容器镜像时，则从Docker Registry中下载镜像，并通过镜像管理驱动Graph driver将下载镜像以Graph的形式存储。")]),r._v(" "),e("li",[r._v("当需要为Docker创建网络环境时，通过网络管理驱动Network driver创建并配置Docker容器网络环境。")]),r._v(" "),e("li",[r._v("当需要限制Docker容器运行资源或执行用户指令等操作时，则通过Exec driver来完成。")]),r._v(" "),e("li",[r._v("Libcontainer是一项独立的容器管理包，Network driverl以及Exec driver都是通过Libcontainer来实现具体对容器进行的操作。")])])])}),[],!1,null,null,null);e.default=o.exports}}]);