(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{473:function(s,e,t){"use strict";t.r(e);var r=t(2),a=Object(r.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("hr"),s._v(" "),e("p",[s._v("Redis，Remote Dictionary Server，远程字典服务，由意大利人 Salvatore Sanfilippo（又名 Antirez）开发，是一个使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、NoSQL 开源内存数据库，其提供多种语言的 API。从 2010 年 3 月 15 日起，Redis 的开发工作由 VMware 主持。从2013 年 5 月开始，Redis 的开发由 Pivotal 赞助。"),e("br"),s._v("\nRedis 之所以称之为字典服务，是因为 Redis 是一个key-value 存储系统。支持存储的 value类型很多，包括 String(字符串)、List(链表)、Set(集合)、Zset(sorted set --有序集合)和 Hash（哈希类型）等。")]),s._v(" "),e("h1",{attrs:{id:"一、nosql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、nosql"}},[s._v("#")]),s._v(" 一、NoSQL")]),s._v(" "),e("p",[s._v("NoSQL（“non-relational”，“Not Only SQL”），泛指非关系型的数据库。随着互联网 web2.0网站的兴起，传统的关系数据库在处理 web2.0 网站，特别是超大规模和高并发的 SNS 类型的 web2.0 纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。")]),s._v(" "),e("h2",{attrs:{id:"_1、键值存储数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、键值存储数据库"}},[s._v("#")]),s._v(" 1、键值存储数据库")]),s._v(" "),e("p",[s._v("就像 Map 一样的 key-value 对。典型代表就是 Redis。")]),s._v(" "),e("h2",{attrs:{id:"_2、列存储数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、列存储数据库"}},[s._v("#")]),s._v(" 2、列存储数据库")]),s._v(" "),e("p",[s._v("关系型数据库是典型的行存储数据库。其存在的问题是，按行存储的数据在物理层面占用的是连续存储空间，不适合海量数据存储。而按列存储则可实现分布式存储，适合海量存储。典型代表是 HBase。")]),s._v(" "),e("h2",{attrs:{id:"_3、文档型数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、文档型数据库"}},[s._v("#")]),s._v(" 3、文档型数据库")]),s._v(" "),e("p",[s._v("其是NoSQL 与关系型数据的结合，最像关系型数据库的 NoSQL。典型代表是 MongoDB。")]),s._v(" "),e("h2",{attrs:{id:"_4、图形-graph-数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、图形-graph-数据库"}},[s._v("#")]),s._v(" 4、图形(Graph)数据库")]),s._v(" "),e("p",[s._v("用于存放一个节点关系的数据库，例如描述不同人间的关系。典型代表是Neo4J。")]),s._v(" "),e("h1",{attrs:{id:"二、redis用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、redis用途"}},[s._v("#")]),s._v(" 二、Redis用途")]),s._v(" "),e("p",[s._v("Redis 在生产中使用最多的场景就是做数据缓存。即客户端从 DBMS 中查询出的数据首先写入到 Redis 中，后续无论哪个客户端再需要访问该数据，直接读取 Redis 中的即可，不仅减小了 RT，而且降低了 DBMS 的压力。"),e("br"),s._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/scr1pt-yang/mypichost@main/img/redis-1.png",alt:"image.png"}}),e("br"),s._v("\n根据 Redis 缓存的数据与 DBMS 中数据的同步性划分，缓存一般可划分为两类："),e("strong",[s._v("实时同步缓存")]),s._v("，与"),e("strong",[s._v("阶段性同步缓存")]),s._v("。"),e("br"),s._v("\n实时同步缓存是指：DBMS 中数据更新后，Redis 缓存中的存放的相关数据会被立即清除，以促使再有对该数据的访问请求到来时，必须先从 DBMS 中查询获取到最新数据，然后再写入到 Redis。"),e("br"),s._v("\n阶段性同步缓存是指：Redis 缓存中的数据允许在一段时间内与 DBMS 中的数据不完全一致。而这个时间段就是这个缓存数据的过期时间。")]),s._v(" "),e("h1",{attrs:{id:"三、redis特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、redis特性"}},[s._v("#")]),s._v(" 三、Redis特性")]),s._v(" "),e("p",[s._v("能够做缓存的技术、中间件很多，例如，MyBatis 自带的二级缓存、Memched 等。只所以在生产中做缓存的产品几乎无一例外的会选择 Redis，是因为它有很多其它产品所不具备的特性。"),e("br"),s._v("\n●  性能极高：Redis 读的速度可以达到 11w 次/s，写的速度可以达到 8w 次/s。只所以具有这么高的性能，因为以下几点原因：（1）Redis 的所有操作都是在内存中发生的。（2）Redis 是用C 语言开发的。（3）Redis 源码非常精细（集性能与优雅于一身）。"),e("br"),s._v("\n●  简单稳定：Redis 源码很少。早期版本只有 2w 行左右。从 3.0 版本开始，增加了集群功能，代码变为了 5w 行左右。"),e("br"),s._v("\n●  持久化：Redis 内存中的数据可以进行持久化，其有两种方式：RDB 与AOF。"),e("br"),s._v("\n●  高可用集群：Redis 提供了高可用的主从集群功能，可以确保系统的安全性。"),e("br"),s._v("\n●  丰富的数据类型：Redis 是一个 key-value 存储系统。支持存储的value 类型很多，包括 String(字符串)、List(链表)、Set(集合)、Zset(sorted set --有序集合)和Hash（哈希类型）等，还有 BitMap、HyperLogLog、Geospatial 类型。"),e("br"),s._v("\n  ■  BitMap：一般用于大数据量的二值性统计。"),e("br"),s._v("\n  ■  HyperLogLog：其是 Hyperlog Log，用于对数据量超级庞大的日志做去重统计。"),e("br"),s._v("\n  ■  Geospatial：地理空间，其主要用于地理位置相关的计算。"),e("br"),s._v("\n●  强大的功能：Redis 提供了数据过期功能、发布/订阅功能、简单事务功能，还支持 Lua脚本扩展功能。"),e("br"),s._v("\n●  客户端语言广泛：Redis 提供了简单的TCP 通信协议，编程语言可以方便地的接入 Redis。所以，有很多的开源社区、大公司等开发出了很多语言的 Redis 客户端。"),e("br"),s._v("\n●  支持 ACL 权限控制：之前的权限控制非常笨拙。从Redis6 开始引入了ACL 模块，可以为不同用户定制不同的用户权限。"),e("br"),s._v("\n  ■  ACL：Access Control List，访问控制列表，是一种细粒度的权限管理策略，可以针对任意用户与组进行权限控制。目前大多数 Unix 系统与 Linux 2.6 版本已经支持 ACL 了。"),e("br"),s._v("\n  ■  Unix 与 Linux 系统默认使用是 UGO（User、Group、Other）权限控制策略，其是一种粗粒度的权限管理策略。"),e("br"),s._v("\n●  支持多线程 IO 模型：Redis 之前版本采用的是单线程模型，从 6.0 版本开始支持了多线程模型。")]),s._v(" "),e("h1",{attrs:{id:"四、redis的io模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、redis的io模型"}},[s._v("#")]),s._v(" 四、Redis的IO模型")]),s._v(" "),e("p",[s._v("Redis 客户端提交的各种请求是如何最终被 Redis 处理的？Redis 处理客户端请求所采用的处理架构，称为Redis 的 IO 模型。不同版本的Redis 采用的 IO 模型是不同的。")]),s._v(" "),e("h2",{attrs:{id:"_1、单线程模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、单线程模型"}},[s._v("#")]),s._v(" 1、单线程模型")]),s._v(" "),e("p",[s._v("对于 Redis 3.0 及其以前版本，Redis 的 IO 模型采用的是"),e("strong",[s._v("纯粹的单线程模型")]),s._v("。即所有客户端的请求全部由一个线程处理。"),e("br"),s._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/scr1pt-yang/mypichost@main/img/redis-2.png",alt:"image.png"}}),e("br"),s._v("\nRedis 的单线程模型采用了"),e("strong",[s._v("多路复用技术")]),s._v("。"),e("br"),s._v("\n对于多路复用器的多路选择算法常见的有三种：select 模型、poll 模型、epoll 模型。"),e("br"),s._v("\n●  poll 模型的选择算法：采用的是轮询算法。该模型对客户端的就绪处理是有延迟的。"),e("br"),s._v("\n●  epoll 模型的选择算法：采用的是回调方式。根据就绪事件发生后的处理方式的不同，又可分为 LT 模型与 ET 模型。"),e("br"),s._v("\n每个客户端若要向 Redis 提交请求，都需要与 Redis 建立一个 socket 连接，并向事件分发器注册一个事件。一旦该事件发生就表明该连接已经就绪。而一旦连接就绪，事件分发器就会感知到，然后获取客户端通过该连接发送的请求，并将由该事件分发器所绑定的这个唯一的线程来处理。如果该线程还在处理多个任务，则将该任务写入到任务队列等待线程处理。"),e("br"),s._v("\n之所以称为事件分发器，是因为它会根据不同的就绪事件，将任务交由不同的事件处理器去处理。")]),s._v(" "),e("h2",{attrs:{id:"_2、混合线程模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、混合线程模型"}},[s._v("#")]),s._v(" 2、混合线程模型")]),s._v(" "),e("p",[s._v("从 Redis 4.0 版本开始，Redis 中就开始加入了多线程元素。处理客户端请求的仍是单线程模型，但对于一些比较耗时但又不影响对客户端的响应的操作，就由后台其它线程来处理。例如，持久化、对 AOF 的rewrite、对失效连接的清理等。")]),s._v(" "),e("h2",{attrs:{id:"_3、多线程模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、多线程模型"}},[s._v("#")]),s._v(" 3、多线程模型")]),s._v(" "),e("p",[s._v("Redis 6.0 版本，才是真正意义上的多线程模型。因为其对于客户端请求的处理采用的是多线程模型。"),e("br"),s._v(" "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/scr1pt-yang/mypichost@main/img/redis-3.png",alt:"image.png"}}),e("br"),s._v("\n多线程 IO 模型中的“多线程”仅用于接受、解析客户端的请求，然后将解析出的请求写入到任务队列。而对具体任务（命令）的处理，仍是由主线程处理。这样做使得用户无需考虑线程安全问题，无需考虑事务控制，无需考虑像 LPUSH/LPOP  等命令的执行顺序问题。")]),s._v(" "),e("h2",{attrs:{id:"_4、优缺点总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、优缺点总结"}},[s._v("#")]),s._v(" 4、优缺点总结")]),s._v(" "),e("h3",{attrs:{id:"_1-单线程模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-单线程模型"}},[s._v("#")]),s._v(" 1.单线程模型")]),s._v(" "),e("p",[s._v("●  优点：可维护性高，性能高。不存在并发读写情况，所以也就不存在执行顺序的不确定性，不存在线程切换开销，不存在死锁问题，不存在为了数据安全而进行的加锁/解锁开销。"),e("br"),s._v("\n●  缺点：性能会受到影响，且由于单线程只能使用一个处理器，所以会形成处理器浪费。")]),s._v(" "),e("h3",{attrs:{id:"_2-多线程模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-多线程模型"}},[s._v("#")]),s._v(" 2.多线程模型")]),s._v(" "),e("p",[s._v("●  优点：其结合了多线程与单线程的优点，避开了它们的所有不足。"),e("br"),s._v("\n●  缺点：该模型没有显示不足。如果非要找其不足的话就是，其并非是一个真正意义上的“多线程”，因为真正处理“任务”的线程仍是单线程。所以，其对性能也是有些影响的。")])])}),[],!1,null,null,null);e.default=a.exports}}]);